# HC3-robust models for HIV-positive group, binary predictors → "Beta, p"

library(readxl)
library(dplyr)
library(tidyr)
library(broom)
library(lmtest)
library(sandwich)

# --- Load & prepare data (HIV-positive only) ---
file_path <- "C:/Users/USER/Desktop/Projects/ECHO-6MW/Second set/Dataset_TTEand6MWD.xlsx"
data_all <- read_excel(file_path)

data <- data_all %>%
  filter(a1_hiv_st == 1) %>%
  mutate(
    sex = as.factor(sex),
    race_id_der = as.factor(race_id_der),
    bmi_cat_tri_der = as.factor(bmi_cat_tri_der),
    ever_smok_stat_der = as.factor(ever_smok_stat_der),
    ever_ivdu_stat_der = as.factor(ever_ivdu_stat_der),
    g9_hepatitis_c = as.factor(g9_hepatitis_c),
    anemia_der = as.factor(anemia_der),
    a1_hiv_st = as.factor(a1_hiv_st),
    post_old_gli_der = as.factor(post_old_gli_der),
    dlco_stat_binary_gli_pft_1_der = as.factor(dlco_stat_binary_gli_pft_1_der),
    vl_detectable_der = as.factor(vl_detectable_der)
  ) %>%
  droplevels()

# --- Binary independent variables ---
independent_vars <- c("lv_syst_dysfxn_der", "ph_prob_der", "dd", "valve_abn_der")

# --- Model adjustment sets (0–4) ---
model_adjustments <- list(
  "Model 0" = c(),
  "Model 1" = c("age_tte_der", "sex", "race_id_der"),
  "Model 2" = c("age_tte_der", "sex", "race_id_der",
                "bmi_cat_tri_der", "ever_smok_stat_der", "ever_ivdu_stat_der",
                "g9_hepatitis_c", "anemia_der"),
  "Model 3" = c("age_tte_der", "sex", "race_id_der",
                "bmi_cat_tri_der", "ever_smok_stat_der", "ever_ivdu_stat_der",
                "g9_hepatitis_c", "anemia_der",
                "time_living_with_hiv_der", "cd4", "vl_detectable_der"),
  "Model 4" = c("age_tte_der", "sex", "race_id_der",
                "bmi_cat_tri_der", "ever_smok_stat_der", "ever_ivdu_stat_der",
                "g9_hepatitis_c", "anemia_der",
                "time_living_with_hiv_der", "cd4", "vl_detectable_der",
                "post_old_gli_der", "dlco_stat_binary_gli_pft_1_der")
)

# --- Results table ("Beta, p") ---
results_bin_hiv1 <- data.frame(matrix(NA, nrow = length(model_adjustments), ncol = length(independent_vars)))
rownames(results_bin_hiv1) <- names(model_adjustments)
colnames(results_bin_hiv1) <- independent_vars

for (model_name in names(model_adjustments)) {
  adjusters <- model_adjustments[[model_name]]

  for (var in independent_vars) {
    # Subset required vars and drop NAs
    vars_needed <- c("dist_meters_1", var, adjusters)
    subdat <- data %>%
      dplyr::select(all_of(vars_needed)) %>%
      tidyr::drop_na() %>%
      droplevels()

    # Need both levels of the binary predictor
    if (!var %in% names(subdat) || length(unique(subdat[[var]])) < 2 || nrow(subdat) < 2) {
      results_bin_hiv1[model_name, var] <- "NA"
      next
    }

    # Drop adjusters that collapsed to 1 level
    valid_adj <- if (length(adjusters)) {
      adjusters[sapply(adjusters, function(x) {
        obj <- subdat[[x]]
        if (is.factor(obj)) nlevels(obj) >= 2 else TRUE
      })]
    } else character(0)

    # Build formula
    formula_str <- if (length(valid_adj) == 0) {
      paste("dist_meters_1 ~", var)
    } else {
      paste("dist_meters_1 ~", var, "+", paste(valid_adj, collapse = " + "))
    }

    fit <- lm(as.formula(formula_str), data = subdat)

    # HC3 robust SEs
    rob <- lmtest::coeftest(fit, vcov = sandwich::vcovHC(fit, type = "HC3")) %>% broom::tidy()
    main_row <- rob %>% dplyr::filter(term == var)

    results_bin_hiv1[model_name, var] <- if (nrow(main_row) == 1) {
      sprintf("%.3f, %.3f", main_row$estimate, main_row$p.value)  # Beta (Δ meters for 1 vs 0), p
    } else {
      "NA"
    }
  }
}

# View results
View(results_bin_hiv1)
