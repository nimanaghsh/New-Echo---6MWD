# --- Libraries ---
library(readxl)
library(dplyr)
library(tidyr)
library(broom)

# --- Common setup ---
file_path <- "C:/Users/USER/Desktop/Projects/ECHO-6MW/Second set/Dataset_TTEand6MWD.xlsx"
data0 <- read_excel(file_path)

# Categorical/binary predictors
binary_vars <- c("lv_syst_dysfxn_der", "ph_prob_der", "dd", "valve_abn_der")

# Helper: run OLS with categorical predictors and return a "beta, p" table (non-robust SEs)
# Collects all contrast rows that start with the variable name (handles 0/1 or 0/1/2, etc.)
run_models_lm_cat <- function(df, outcome, preds, model_adjustments) {
  out <- data.frame(matrix(NA, nrow = length(model_adjustments), ncol = length(preds)))
  rownames(out) <- names(model_adjustments)
  colnames(out) <- preds
  
  for (model_name in names(model_adjustments)) {
    adjusters <- model_adjustments[[model_name]]
    
    for (var in preds) {
      vars_needed <- c(outcome, var, adjusters)
      
      subdat <- df |>
        dplyr::select(dplyr::all_of(vars_needed)) |>
        tidyr::drop_na() |>
        droplevels()
      
      # Basic checks
      ok_outcome <- outcome %in% names(subdat) && is.numeric(subdat[[outcome]]) && sd(subdat[[outcome]]) > 0
      ok_predict <- var %in% names(subdat) && length(unique(subdat[[var]])) >= 2
      if (!ok_outcome || !ok_predict || nrow(subdat) < 5) {
        out[model_name, var] <- "NA"
        next
      }
      
      # Build formula
      formula_str <- if (length(adjusters) == 0) {
        paste(outcome, "~", var)
      } else {
        paste(outcome, "~", var, "+", paste(adjusters, collapse = " + "))
      }
      
      fit <- tryCatch(lm(stats::as.formula(formula_str), data = subdat, na.action = na.exclude),
                      error = function(e) NULL)
      if (is.null(fit)) { out[model_name, var] <- "NA"; next }
      
      tt <- tryCatch(broom::tidy(fit), error = function(e) NULL)
      if (is.null(tt)) { out[model_name, var] <- "NA"; next }
      
      # Collect all rows belonging to this predictor (covers multi-level)
      rows <- tt |>
        dplyr::filter(term != "(Intercept)") |>
        dplyr::filter(grepl(paste0("^", var), term) | term == var)
      
      if (nrow(rows) == 0) {
        out[model_name, var] <- "NA"
      } else if (nrow(rows) == 1) {
        out[model_name, var] <- sprintf("%.3f, %.3f", rows$estimate, rows$p.value)
      } else {
        # multi-level factor: print each contrast
        lvl <- sub(paste0("^", var), "", rows$term)
        parts <- sprintf("%s: %.3f, %.3f", lvl, rows$estimate, rows$p.value)
        out[model_name, var] <- paste(parts, collapse = "; ")
      }
    }
  }
  out
}

# =========================
# 1) ALL participants (Models 0–3)
# =========================
data_all <- data0 |>
  mutate(
    # Outcome numeric (coerce in case Excel imported as text)
    sgrq_total_score_1 = suppressWarnings(as.numeric(sgrq_total_score_1)),
    # Predictors as factors (so 1:, 2: contrasts print if multi-level)
    across(all_of(binary_vars), ~ as.factor(.)),
    # Covariates
    sex = as.factor(sex),
    race_id_der = as.factor(race_id_der),
    bmi_cat_tri_der = as.factor(bmi_cat_tri_der),
    ever_smok_stat_der = as.factor(ever_smok_stat_der),
    ever_ivdu_stat_der = as.factor(ever_ivdu_stat_der),
    g9_hepatitis_c = as.factor(g9_hepatitis_c),
    anemia_der = as.factor(anemia_der),
    a1_hiv_st = as.factor(a1_hiv_st),
    post_old_gli_der = as.factor(post_old_gli_der),
    dlco_stat_binary_gli_pft_1_der = as.factor(dlco_stat_binary_gli_pft_1_der)
  ) |>
  droplevels()

model_adjustments_all <- list(
  "Model 0" = c(),
  "Model 1" = c("age_tte_der", "sex", "race_id_der"),
  "Model 2" = c("age_tte_der", "sex", "race_id_der",
                "bmi_cat_tri_der", "ever_smok_stat_der", "ever_ivdu_stat_der",
                "g9_hepatitis_c", "anemia_der", "a1_hiv_st"),
  "Model 3" = c("age_tte_der", "sex", "race_id_der",
                "bmi_cat_tri_der", "ever_smok_stat_der", "ever_ivdu_stat_der",
                "g9_hepatitis_c", "anemia_der", "a1_hiv_st",
                "post_old_gli_der", "dlco_stat_binary_gli_pft_1_der")
)

results_sgrq_all_BIN_NR <- run_models_lm_cat(
  df = data_all,
  outcome = "sgrq_total_score_1",
  preds = binary_vars,
  model_adjustments = model_adjustments_all
)

# =========================
# 2) HIV-negative (a1_hiv_st == 0; Models 0–3)
# =========================
data_hiv0 <- data0 |>
  filter(a1_hiv_st == 0) |>
  mutate(
    sgrq_total_score_1 = suppressWarnings(as.numeric(sgrq_total_score_1)),
    across(all_of(binary_vars), ~ as.factor(.)),
    sex = as.factor(sex),
    race_id_der = as.factor(race_id_der),
    bmi_cat_tri_der = as.factor(bmi_cat_tri_der),
    ever_smok_stat_der = as.factor(ever_smok_stat_der),
    ever_ivdu_stat_der = as.factor(ever_ivdu_stat_der),
    anemia_der = as.factor(anemia_der),
    post_old_gli_der = as.factor(post_old_gli_der),
    dlco_stat_binary_gli_pft_1_der = as.factor(dlco_stat_binary_gli_pft_1_der)
  ) |>
  droplevels()

model_adjustments_hiv0 <- list(
  "Model 0" = c(),
  "Model 1" = c("age_tte_der", "sex", "race_id_der"),
  "Model 2" = c("age_tte_der", "sex", "race_id_der",
                "bmi_cat_tri_der", "ever_smok_stat_der", "ever_ivdu_stat_der",
                "anemia_der"),
  "Model 3" = c("age_tte_der", "sex", "race_id_der",
                "bmi_cat_tri_der", "ever_smok_stat_der", "ever_ivdu_stat_der",
                "anemia_der", "post_old_gli_der", "dlco_stat_binary_gli_pft_1_der")
)

results_sgrq_hiv0_BIN_NR <- run_models_lm_cat(
  df = data_hiv0,
  outcome = "sgrq_total_score_1",
  preds = binary_vars,
  model_adjustments = model_adjustments_hiv0
)

# =========================
# 3) HIV-positive (a1_hiv_st == 1; Models 0–4)
# =========================
data_hiv1 <- data0 |>
  filter(a1_hiv_st == 1) |>
  mutate(
    sgrq_total_score_1 = suppressWarnings(as.numeric(sgrq_total_score_1)),
    across(all_of(binary_vars), ~ as.factor(.)),
    sex = as.factor(sex),
    race_id_der = as.factor(race_id_der),
    bmi_cat_tri_der = as.factor(bmi_cat_tri_der),
    ever_smok_stat_der = as.factor(ever_smok_stat_der),
    ever_ivdu_stat_der = as.factor(ever_ivdu_stat_der),
    g9_hepatitis_c = as.factor(g9_hepatitis_c),
    anemia_der = as.factor(anemia_der),
    post_old_gli_der = as.factor(post_old_gli_der),
    dlco_stat_binary_gli_pft_1_der = as.factor(dlco_stat_binary_gli_pft_1_der),
    vl_detectable_der = as.factor(vl_detectable_der),
    time_living_with_hiv_der = suppressWarnings(as.numeric(time_living_with_hiv_der)),
    cd4 = suppressWarnings(as.numeric(cd4))
  ) |>
  droplevels()

model_adjustments_hiv1 <- list(
  "Model 0" = c(),
  "Model 1" = c("age_tte_der", "sex", "race_id_der"),
  "Model 2" = c("age_tte_der", "sex", "race_id_der",
                "bmi_cat_tri_der", "ever_smok_stat_der", "ever_ivdu_stat_der",
                "g9_hepatitis_c", "anemia_der"),
  "Model 3" = c("age_tte_der", "sex", "race_id_der",
                "bmi_cat_tri_der", "ever_smok_stat_der", "ever_ivdu_stat_der",
                "g9_hepatitis_c", "anemia_der",
                "time_living_with_hiv_der", "cd4", "vl_detectable_der"),
  "Model 4" = c("age_tte_der", "sex", "race_id_der",
                "bmi_cat_tri_der", "ever_smok_stat_der", "ever_ivdu_stat_der",
                "g9_hepatitis_c", "anemia_der",
                "time_living_with_hiv_der", "cd4", "vl_detectable_der",
                "post_old_gli_der", "dlco_stat_binary_gli_pft_1_der")
)

results_sgrq_hiv1_BIN_NR <- run_models_lm_cat(
  df = data_hiv1,
  outcome = "sgrq_total_score_1",
  preds = binary_vars,
  model_adjustments = model_adjustments_hiv1
)

# --- Inspect (in RStudio) ---
View(results_sgrq_all_BIN_NR)
View(results_sgrq_hiv0_BIN_NR)
View(results_sgrq_hiv1_BIN_NR)
